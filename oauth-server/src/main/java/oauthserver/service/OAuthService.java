package oauthserver.service;

import com.fasterxml.jackson.databind.ObjectMapper;
import io.jsonwebtoken.Claims;
import lombok.AllArgsConstructor;
import lombok.SneakyThrows;
import lombok.extern.slf4j.Slf4j;
import oauthserver.configuration.Constant;
import oauthserver.domain.dto.AccessTokenIntrospectionResponse;
import oauthserver.domain.dto.UserInfoResponse;
import oauthserver.domain.model.User;
import oauthserver.enumerations.CodeChallengeMethod;
import oauthserver.domain.model.OAuthFlowSession;
import oauthserver.domain.dto.AccessTokenResponse;
import oauthserver.enumerations.Scope;
import org.springframework.stereotype.Service;
import org.springframework.web.util.UriComponentsBuilder;

import javax.servlet.http.Cookie;
import javax.servlet.http.HttpServletResponse;
import java.util.*;

/**
 * Perform OAuth operations
 */
@Service
@Slf4j
@AllArgsConstructor
public class OAuthService {

    private final TokenService tokenService;
    private final PckeService pckeService;
    private final UserService userService;
    private final ObjectMapper mapper = new ObjectMapper();


    /**
     * Create a cookie to identify the oauth flow and return its id.
     *
     * @param response
     *          HTTP response which we'll add the cookie.
     * @return The id created for the current flow.
     */
    public String addFlowCookie(HttpServletResponse response) {
        log.info("Create an id to the flow and set a cookie the response");
        String flowId = UUID.randomUUID().toString();
        log.info("Flow id: {}", flowId);
        Cookie flowCookie = new Cookie(Constant.FLOW_ID_COOKIE, flowId);

        flowCookie.setMaxAge(Constant.FLOW_ID_COOKIE_EXPIRE_TIME_SECONDS);
        response.addCookie(flowCookie);

        return flowId;
    }

    /**
     * Build the redirect uri using the values in the current oauth session.
     *
     * @param oAuthFlowSession
     *          It contains the <code>state</code> and <code>authCode</code> created to the oauth flow.
     *          We add these values as query parameters to the base <code>redirectUri</code>.
     * @return The redirect uri.
     */
    public String buildRedirectUri(OAuthFlowSession oAuthFlowSession) {
        return UriComponentsBuilder
                .fromUriString(oAuthFlowSession.getClient().getRedirectUri())
                .queryParam("code", oAuthFlowSession.getAuthCode())
                .queryParam("state", oAuthFlowSession.getState())
                .build().toUriString();
    }


    /**
     * More info on oauthserver.service.TokenService::buildAccessTokenResponse
     */
    public AccessTokenResponse buildAccessTokenResponse(OAuthFlowSession oAuthFlowSession) {
        return this.tokenService.buildAccessTokenResponse(oAuthFlowSession);
    }

    /**
     * More info on oauthserver.service.TokenService::getAccessTokenInformation
     */
    public AccessTokenIntrospectionResponse getAccessTokenInformation(String token) {
        return this.tokenService.getAccessTokenInformation(token);
    }

    /**
     * Using the access token, retrieve the information that was consented by the user.
     *
     * @param accessToken
     *          Access token generated by the Authorization Server that has at least
     *          the scope <code>openid</code>.
     *          From it, we retrieve the user information from the database and, based on the other
     *          scopes (e.g. <code>email</code>, <code>name</code>), we define which attributes will
     *          be returned in the response.
     * @return The user information consented in the access token.
     */
    @SneakyThrows
    public UserInfoResponse getUserInfo(String accessToken) {
        Claims claims = this.tokenService.getClaims(accessToken);
        List<Scope> scopes = this.tokenService.getScopes(accessToken);
        User user = this.userService.getUser(claims.getSubject());

        Map<String, Object> userInfoMap = this.tokenService.getOpenIdUserSpecificClaims(scopes, user);
        userInfoMap.put("username", user.getUsername());

        return mapper.convertValue(userInfoMap, UserInfoResponse.class);
    }

    /**
     * This method will fetch the information about the current auth session and verify if the codeVerifier
     * matches the codeChallenge.
     *
     * @param codeVerifier
     *          Plain text code that will be compared to the codeChallenge provided by the client.
     * @param oAuthFlowSession
     *          Information about the oauth session.
     * @return a boolean indicating if the challenge was successful.
     */
    public boolean validatePckeSession(String codeVerifier, OAuthFlowSession oAuthFlowSession) {
        return this.pckeService.verifyChallenge(
                codeVerifier,
                oAuthFlowSession.getCodeChallenge(),
                oAuthFlowSession.getCodeChallengeMethod()
        );
    }

    /**
     * More info on oauthserver.service.PckeService::generateCodeChallenge.
     */
    public String generateCodeChallenge(String codeVerifier, CodeChallengeMethod codeChallengeMethod) {
        return this.pckeService.generateCodeChallenge(codeVerifier, codeChallengeMethod);
    }
}
